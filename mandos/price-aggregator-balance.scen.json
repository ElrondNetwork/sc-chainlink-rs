{
    "name": "price aggregator tests",
    "steps": [
        {
            "step": "externalSteps",
            "path": "init-price-aggregator.scen.json"
        },
        {
            "step": "scCall",
            "txId": "1-latestRoundData - trying to read the latest data without first depositing should result in an error --",
            "tx": {
                "from": "address:user",
                "to": "address:price_aggregator_smart_contract",
                "value": "0",
                "function": "latestRoundData",
                "arguments": [],
                "gasLimit": "100,000,000",
                "gasPrice": "0"
            },
            "expect": {
                "status": "4",
                "message": "str:insufficient balance",
                "out": [],
                "gas": "*",
                "refund": "*"
            }
        },
        {
            "step": "scCall",
            "txId": "2-deposit sufficient funds for 2 queries--",
            "tx": {
                "from": "address:user",
                "to": "address:price_aggregator_smart_contract",
                "value": "2,000",
                "function": "deposit",
                "arguments": [],
                "gasLimit": "100,000,000",
                "gasPrice": "0"
            },
            "expect": {
                "status": "0",
                "message": "",
                "out": [],
                "gas": "*",
                "refund": "*"
            }
        },
        {
            "step": "scCall",
            "txId": "3-latestRoundData trying to get the latest data when there is no data should result in an error and not decrease the user's balance --",
            "tx": {
                "from": "address:user",
                "to": "address:price_aggregator_smart_contract",
                "value": "0",
                "function": "latestRoundData",
                "arguments": [],
                "gasLimit": "100,000,000",
                "gasPrice": "0"
            },
            "expect": {
                "status": "4",
                "message": "str:no completed rounds",
                "out": [],
                "gas": "*",
                "refund": "*"
            }
        },
        {
            "step": "scCall",
            "txId": "4-latestPriceFeed - trying to get an inexistent pair's price feed should result in an error--",
            "tx": {
                "from": "address:user",
                "to": "address:price_aggregator_smart_contract",
                "value": "0",
                "function": "latestPriceFeed",
                "arguments": [
                    "str:EGLD",
                    "str:USDT"
                ],
                "gasLimit": "100,000,000",
                "gasPrice": "0"
            },
            "expect": {
                "status": "4",
                "message": "str:token pair not found",
                "out": [],
                "gas": "*",
                "refund": "*"
            }
        },
        {
            "step": "scCall",
            "txId": "5-myBalance - the user's balance should be the same since the last calls resulted in errors (and funds were not deducted)--",
            "tx": {
                "from": "address:user",
                "to": "address:price_aggregator_smart_contract",
                "value": "0",
                "function": "myBalance",
                "arguments": [],
                "gasLimit": "100,000,000",
                "gasPrice": "0"
            },
            "expect": {
                "status": "0",
                "message": "",
                "out": [
                    "2,000"
                ],
                "gas": "*",
                "refund": "*"
            }
        },
        {
            "step": "scCall",
            "txId": "6-withdraw - the user should be able to withdraw any unspent funds--",
            "tx": {
                "from": "address:user",
                "to": "address:price_aggregator_smart_contract",
                "value": "0",
                "function": "withdraw",
                "arguments": [
                    "500"
                ],
                "gasLimit": "100,000,000",
                "gasPrice": "0"
            },
            "expect": {
                "status": "0",
                "message": "",
                "out": [],
                "gas": "*",
                "refund": "*"
            }
        },
        {
            "step": "scCall",
            "txId": "7-myBalance - user should now have 1,500 left--",
            "tx": {
                "from": "address:user",
                "to": "address:price_aggregator_smart_contract",
                "value": "0",
                "function": "myBalance",
                "arguments": [],
                "gasLimit": "100,000,000",
                "gasPrice": "0"
            },
            "expect": {
                "status": "0",
                "message": "",
                "out": [
                    "1,500"
                ],
                "gas": "*",
                "refund": "*"
            }
        },
        {
            "step": "scCall",
            "txId": "8-withdraw - try withdrawing all remaining funds--",
            "tx": {
                "from": "address:user",
                "to": "address:price_aggregator_smart_contract",
                "value": "0",
                "function": "withdraw",
                "arguments": [
                    "1,500"
                ],
                "gasLimit": "100,000,000",
                "gasPrice": "0"
            },
            "expect": {
                "status": "0",
                "message": "",
                "out": [],
                "gas": "*",
                "refund": "*"
            }
        },
        {
            "step": "scCall",
            "txId": "9-myBalance - user's balance should now be 0--",
            "tx": {
                "from": "address:user",
                "to": "address:price_aggregator_smart_contract",
                "value": "0",
                "function": "myBalance",
                "arguments": [],
                "gasLimit": "100,000,000",
                "gasPrice": "0"
            },
            "expect": {
                "status": "0",
                "message": "",
                "out": [
                    "0"
                ],
                "gas": "*",
                "refund": "*"
            }
        }
    ]
}
